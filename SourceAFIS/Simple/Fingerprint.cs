using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Xml.Serialization;
using SourceAFIS.Extraction.Templates;

namespace SourceAFIS.Simple
{
    /// <summary>
    /// Collection of fingerprint-related information.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This class contains basic information (image, template) about the fingerprint that
    /// is used by SourceAFIS to perform template extraction and fingerprint matching.
    /// If you need to attach application-specific information to Fingerprint object,
    /// inherit from this class and add fields as necessary. Fingerprint objects can be
    /// grouped in Person objects.
    /// </para>
    /// <para>
    /// This class is designed to be easy to serialize in order to be stored in binary format (BLOB)
    /// in application database, binary or XML files, or sent over network. You can either serialize
    /// the whole object or serialize individual properties. You can set some properties to null
    /// to exclude them from serialization.
    /// </para>
    /// </remarks>
    [Serializable]
    public class Fingerprint : ICloneable
    {
        /// <summary>
        /// Creates empty Fingerprint object.
        /// </summary>
        public Fingerprint() { }

        Bitmap ImageValue;
        /// <summary>
        /// Fingerprint image.
        /// </summary>
        /// <value>
        /// Fingerprint image that was used to extract fingerprint template or other image
        /// attached later after extraction. This property is null by default.
        /// </value>
        /// <remarks>
        /// <para>
        /// This is the fingerprint image. This property must be set before call to AfisEngine.Extract
        /// in order to generate valid Template. Once the Template is generated, Image property has only
        /// informational meaning and it can be set to null to save space. It is however recommended to
        /// keep the original image just in case it is needed to regenerate the Template in future.
        /// </para>
        /// <para>
        /// Accessors of this property do not clone the image. To avoid unwanted sharing of the Bitmap
        /// object, call Bitmap.Clone.
        /// </para>
        /// </remarks>
        [XmlIgnore]
        public Bitmap Image { get { return ImageValue; } set { ImageValue = value; } }

        /// <summary>
        /// Fingerprint template.
        /// </summary>
        /// <value>
        /// Fingerprint template generated by AfisEngine.Extract or other template assigned
        /// for example after deserialization. This property is null by default.
        /// </value>
        /// <remarks>
        /// <para>
        /// Fingerprint template is an abstract model of the fingerprint that is serialized
        /// in a very compact binary format (up to a few KB). Templates are better than fingerprint images,
        /// because they require less space and they are easier to match than images. To generate
        /// Template, pass Fingerprint object with valid Image to AfisEngine.Extract. Template
        /// is required by AfisEngine.Verify and AfisEngine.Identify.
        /// </para>
        /// <para>
        /// If you need access to internal structure of the template, have a look at
        /// SourceAFIS.Extraction.Templates.SerializedFormat class in SourceAFIS source code.
        /// Format of the template may however change in later versions of SourceAFIS.
        /// Applications are recommended to keep the original image in order to be able
        /// to regenerate the template.
        /// </para>
        /// </remarks>
        [XmlAttribute]
        public byte[] Template
        {
            get { return Decoded != null ? new SerializedFormat().Serialize(Decoded) : null; }
            set { Decoded = value != null ? new SerializedFormat().Deserialize(value) : null; }
        }

        Finger FingerValue;
        /// <summary>
        /// Position of the finger on hand.
        /// </summary>
        /// <value>
        /// Finger (thumb to little) and hand (right or left) that was used to create this fingerprint.
        /// Default value Any means unspecified finger position.
        /// </value>
        /// <remarks>
        /// Finger position is used to speed up matching by skipping fingerprint pairs
        /// with incompatible finger positions. Check Finger enumeration for information
        /// on how to control this process. Default value Any disables this behavior.
        /// </remarks>
        [XmlAttribute]
        public Finger Finger { get { return FingerValue; } set { FingerValue = value; } }

        internal Template Decoded;

        /// <summary>
        /// Create deep copy of the Fingerprint.
        /// </summary>
        /// <returns>Deep copy of this Fingerprint.</returns>
        public Fingerprint Clone()
        {
            Fingerprint clone = new Fingerprint();
            clone.Image = Image != null ? (Bitmap)Image.Clone() : null;
            clone.Template = Template != null ? (byte[])Template.Clone() : null;
            clone.Finger = Finger;
            return clone;
        }

        object ICloneable.Clone() { return Clone(); }
    }
}
